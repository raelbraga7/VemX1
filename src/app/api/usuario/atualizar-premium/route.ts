import { NextResponse } from 'next/server';
import { db } from '@/firebase/admin';

export async function GET() {
  console.log('üîÑ Iniciando atualiza√ß√£o de usu√°rios premium...');
  
  try {
    // Buscar todos os usu√°rios com statusAssinatura ativa
    const usuariosRef = db.collection('usuarios');
    const snapshot = await usuariosRef.where('statusAssinatura', '==', 'ativa').get();
    
    if (snapshot.empty) {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio com assinatura ativa encontrado.');
      return NextResponse.json({ 
        message: 'Nenhum usu√°rio com assinatura ativa encontrado'
      });
    }
    
    console.log(`üîç Encontrados ${snapshot.size} usu√°rios com assinatura ativa.`);
    
    const atualizados = [];
    const erros = [];
    
    // Para cada usu√°rio, verificar se ele tem os campos premium e assinaturaAtiva
    for (const doc of snapshot.docs) {
      const usuario = doc.data();
      const userId = doc.id;
      
      // Verifica se j√° tem os campos necess√°rios
      if (usuario.premium === true && usuario.assinaturaAtiva === true) {
        console.log(`‚úÖ Usu√°rio ${userId} j√° tem acesso premium.`);
        continue;
      }
      
      // Atualiza o documento do usu√°rio
      try {
        await db.collection('usuarios').doc(userId).update({
          premium: true,
          assinaturaAtiva: true,
          dataUltimaAtualizacao: new Date()
        });
        
        console.log(`‚úÖ Acesso premium liberado para ${userId} (${usuario.email || 'sem email'}).`);
        atualizados.push({
          id: userId,
          email: usuario.email || 'n√£o dispon√≠vel'
        });
      } catch (error) {
        console.error(`‚ùå Erro ao atualizar usu√°rio ${userId}:`, error);
        erros.push({
          id: userId,
          erro: error instanceof Error ? error.message : 'Erro desconhecido'
        });
      }
    }
    
    console.log(`üèÅ Processo finalizado. ${atualizados.length} usu√°rios atualizados, ${erros.length} erros.`);
    
    return NextResponse.json({ 
      success: true,
      message: `${atualizados.length} usu√°rios atualizados com sucesso.`,
      atualizados,
      erros
    });
  } catch (error) {
    console.error('‚ùå Erro ao processar atualiza√ß√£o de usu√°rios premium:', error);
    return NextResponse.json({ 
      error: 'Erro ao processar atualiza√ß√£o',
      message: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
} 